@model IEnumerable<TFMS.Models.Vehicle>

@{
    ViewData["Title"] = "Vehicles";
}

<h1>Vehicles</h1>

<p>
    <a asp-action="Create" class="btn btn-primary">Add New Vehicle</a>
</p>

@* --- Search and Filter Section --- *@
<form asp-controller="Vehicles" asp-action="Index" method="get" class="mb-4">
    <div class="row g-3 align-items-end">
        <div class="col-md-4">
            <label for="SearchString" class="form-label">Search (Reg No, Make, Model)</label>
            <input type="text" name="searchString" id="SearchString" class="form-control" value="@ViewBag.CurrentSearchString" />
        </div>
        <div class="col-md-3">
            <label for="StatusFilter" class="form-label">Filter by Status</label>
            <select name="statusFilter" id="StatusFilter" class="form-select" asp-items="ViewBag.StatusFilter">
                <option value="">-- Select Status --</option>
            </select>
        </div>
        <div class="col-md-3">
            <label for="FuelTypeFilter" class="form-label">Filter by Fuel Type</label>
            <select name="fuelTypeFilter" id="FuelTypeFilter" class="form-select" asp-items="ViewBag.FuelTypeFilter">
                <option value="">-- Select Fuel Type --</option>
            </select>
        </div>
        <div class="col-md-2 d-flex justify-content-end">
            <button type="submit" class="btn btn-outline-secondary">Apply Filters</button>
            <a asp-action="Index" class="btn btn-outline-danger ms-2">Clear Filters</a>
        </div>
    </div>
</form>
@* --- End Search and Filter Section --- *@

<table class="table table-hover" id="vehiclesTable">
    <thead>
        <tr>
            <th data-sort-column="RegistrationNumber" class="cursor-pointer">
                @Html.DisplayNameFor(model => model.RegistrationNumber) <span class="sort-icon"></span>
            </th>
            <th data-sort-column="Capacity" class="cursor-pointer">
                @Html.DisplayNameFor(model => model.Capacity) <span class="sort-icon"></span>
            </th>
            <th data-sort-column="Status" class="cursor-pointer">
                @Html.DisplayNameFor(model => model.Status) <span class="sort-icon"></span>
            </th>
            <th data-sort-column="LastServicedDate" class="cursor-pointer">
                @Html.DisplayNameFor(model => model.LastServicedDate) <span class="sort-icon"></span>
            </th>
            <th data-sort-column="Make" class="cursor-pointer">
                @Html.DisplayNameFor(model => model.Make) <span class="sort-icon"></span>
            </th>
            <th data-sort-column="Model" class="cursor-pointer">
                @Html.DisplayNameFor(model => model.Model) <span class="sort-icon"></span>
            </th>
            <th data-sort-column="ManufacturingYear" class="cursor-pointer">
                @Html.DisplayNameFor(model => model.ManufacturingYear) <span class="sort-icon"></span>
            </th>
            <th data-sort-column="FuelType" class="cursor-pointer">
                @Html.DisplayNameFor(model => model.FuelType) <span class="sort-icon"></span>
            </th>
            <th data-sort-column="CurrentOdometerKm" class="cursor-pointer">
                @Html.DisplayNameFor(model => model.CurrentOdometerKm) <span class="sort-icon"></span>
            </th>
            <th></th> @* Actions column - not sortable *@
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.RegistrationNumber)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Capacity)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Status)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LastServicedDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Make)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Model)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ManufacturingYear)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.FuelType)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CurrentOdometerKm)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.VehicleId">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.VehicleId">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.VehicleId">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    } @* Good practice to include *@
    <style>
        .cursor-pointer {
            cursor: pointer;
        }

        .sort-icon {
            margin-left: 5px;
        }

        .sort-asc::after {
            content: "\25B2"; /* Up arrow */
        }

        .sort-desc::after {
            content: "\25BC"; /* Down arrow */
        }
    </style>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const table = document.getElementById('vehiclesTable');
            if (!table) return;

            const headers = table.querySelectorAll('th[data-sort-column]');
            const tbody = table.querySelector('tbody');
            if (!tbody) return;

            let currentSortColumn = null;
            let currentSortDirection = 'asc';

            headers.forEach(header => {
                header.addEventListener('click', function () {
                    const column = this.dataset.sortColumn;

                    if (currentSortColumn === column) {
                        currentSortDirection = (currentSortDirection === 'asc' ? 'desc' : 'asc');
                    } else {
                        currentSortDirection = 'asc'; // Reset direction if new column is clicked
                    }
                    currentSortColumn = column;

                    // Remove existing sort icons and classes from all headers
                    headers.forEach(h => {
                        h.classList.remove('sort-asc', 'sort-desc');
                    });

                    // Add new sort icon class to the clicked header
                    if (currentSortDirection === 'asc') {
                        this.classList.add('sort-asc');
                    } else {
                        this.classList.add('sort-desc');
                    }

                    sortTable(column, currentSortDirection);
                });
            });

            function sortTable(columnName, direction) {
                const rows = Array.from(tbody.querySelectorAll('tr'));

                rows.sort((a, b) => {
                    const headerIndex = Array.from(headers).findIndex(h => h.dataset.sortColumn === columnName);
                    if (headerIndex === -1) return 0;

                    const cellA = a.children[headerIndex];
                    const cellB = b.children[headerIndex];

                    if (!cellA || !cellB) return 0;

                    const valA = cellA.textContent.trim();
                    const valB = cellB.textContent.trim();

                    let comparison = 0;

                    // Try to convert to number for numeric columns
                    const numA = parseFloat(valA);
                    const numB = parseFloat(valB);

                    if (!isNaN(numA) && !isNaN(numB)) {
                        comparison = numA - numB;
                    }
                    // Try to convert to date for date columns (using multiple common formats)
                    else if (moment && (moment(valA, ['YYYY-MM-DD', 'MMM DD, YYYY'], true).isValid() && moment(valB, ['YYYY-MM-DD', 'MMM DD, YYYY'], true).isValid())) {
                        const dateA = moment(valA, ['YYYY-MM-DD', 'MMM DD, YYYY'], true).valueOf();
                        const dateB = moment(valB, ['YYYY-MM-DD', 'MMM DD, YYYY'], true).valueOf();
                        comparison = dateA - dateB;
                    }
                    // Otherwise, compare as strings (case-insensitive)
                    else {
                        comparison = valA.localeCompare(valB, undefined, { sensitivity: 'base' });
                    }

                    return direction === 'asc' ? comparison : -comparison;
                });

                // Re-append sorted rows to the tbody
                rows.forEach(row => tbody.appendChild(row));
            }
        });
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
}
